/*
 ==============================================================================
 
 This file was auto-generated by the Jucer!
 
 It contains the basic startup code for a Juce application.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "Envelope.h"
#include "BackgroundImage.h"

//==============================================================================
// This is a handy slider subclass that controls an AudioProcessorParameter
// (may move this class into the library itself at some point in the future..)

class WavelandSynthAudioProcessorEditor::ParameterSlider   : public Slider,
                                                             private Timer
{
public:
    ParameterSlider (AudioProcessorParameter& p)
    : Slider (p.getName (256)), param (p)
    {
        setRange (0.0, 1.0, 0.0);
        startTimerHz (30);
        updateSliderPos();
        Slider::setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
        Slider::setTextBoxStyle(Slider::TextBoxBelow, false, 60, 15);
        Slider::setColour(juce::Slider::rotarySliderFillColourId, Colours::lightcyan);
        Slider::setColour(juce::Slider::rotarySliderOutlineColourId, Colours::cyan.darker(0.2f));
        Slider::setColour(juce::Slider::textBoxBackgroundColourId, Colour::fromFloatRGBA (0.0, 0.0, 0.0, 0.0));
        Slider::setColour(juce::Slider::textBoxOutlineColourId, Colour::fromFloatRGBA (0.0, 0.0, 0.0, 0.0));
        Slider::setColour(juce::Slider::textBoxTextColourId, Colours::lightcyan);
        Slider::setSize(60, 60);
    }
    
    void valueChanged() override
    {
        param.setValue ((float) Slider::getValue());
    }
    
    void timerCallback() override       { updateSliderPos(); }
    
    void startedDragging() override     { param.beginChangeGesture(); }
    void stoppedDragging() override     { param.endChangeGesture();   }
    
    double getValueFromText (const String& text) override   { return param.getValueForText (text); }
    String getTextFromValue (double value) override         { return param.getText ((float) value, 1024); }
    
    void updateSliderPos()
    {
        const float newValue = param.getValue();
        
        if (newValue != (float) Slider::getValue())
            Slider::setValue (newValue);
    }
    
    void makeParamSlider (ScopedPointer<ParameterSlider> newSlider, AudioProcessorParameter& param)
    {
        addAndMakeVisible(newSlider = new ParameterSlider (param));
        //newSlider->setSliderStyle (Slider::Rotary);
        newSlider->setTextBoxStyle (Slider::TextBoxBelow, false, 60, newSlider->getTextBoxHeight());
    }
    
    AudioProcessorParameter& param;
    
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ParameterSlider)
};

//==============================================================================
WavelandSynthAudioProcessorEditor::WavelandSynthAudioProcessorEditor (WavelandSynthAudioProcessor& owner)
    : AudioProcessorEditor (owner),
      midiKeyboard (owner.getMidiKeyboardState(), MidiKeyboardComponent::horizontalKeyboard),

      bendAmountLabel (String::empty, "Bend Amount:"),
      detuneLabel (String::empty, "Detune:"),
      balanceLabel (String::empty, "OSC Balance:"),
      cutoffLabel (String::empty, "Cutoff:"),
      resonaceLabel ( String::empty, "Resonace:"),
      keytrackLabel ( String::empty, "Keytracking:"),
      filEnvAmtLabel (String::empty, "Filter EnvAmt:"),
      lfoRateLabel (String::empty, "Lfo Rate:"),
      vibratoAmtLabel (String::empty, "Vibrato Amt:"),

      volAttackLabel ( String::empty, "Attack:"),
      volDecayLabel ( String::empty, "Decay:"),
      volSustainLabel ( String::empty, "Sustain:"),
      volReleaseLabel ( String::empty, "Release:"),

      filAttackLabel ( String::empty, "FAttack:"),
      filDecayLabel ( String::empty, "FDecay:"),
      filSustainLabel ( String::empty, "FSustain:"),
      filReleaseLabel ( String::empty, "FRelease:"),

      gainLabel ( String::empty, "Gain")


{
 
    // add the Look and Feel
    
    setLookAndFeel (&waveLookandFeel);
    
    // add the background
    
    addAndMakeVisible (BackImageObj);
    
    // add some sliders...
    
    addAndMakeVisible (bendAmountSlider = new ParameterSlider (*owner.getParameters()[0] ));
    
    addAndMakeVisible (detuneSlider = new ParameterSlider(*owner.getParameters()[1] ));
    
    addAndMakeVisible (balanceSlider = new ParameterSlider(*owner.getParameters()[2] ));
    
    addAndMakeVisible (cutoffSlider = new ParameterSlider(*owner.getParameters()[3] ));
    
    addAndMakeVisible (resonaceSlider = new ParameterSlider(*owner.getParameters()[4] ));
    
    addAndMakeVisible (keytrackSlider = new ParameterSlider(*owner.getParameters()[5] ));
    
    addAndMakeVisible (filEnvAmtSlider = new ParameterSlider(*owner.getParameters()[6] ));
    
    addAndMakeVisible (lfoRateSlider = new ParameterSlider(*owner.getParameters()[7] ));
    
    addAndMakeVisible (vibratoAmtSlider = new ParameterSlider(*owner.getParameters()[8] ));
    
    
    addAndMakeVisible (volAttackSlider = new ParameterSlider(*owner.getParameters()[9] ));
    
    addAndMakeVisible (volDecaySlider = new ParameterSlider(*owner.getParameters()[10] ));

    addAndMakeVisible (volSustainSlider = new ParameterSlider(*owner.getParameters()[11] ));

    addAndMakeVisible (volReleaseSlider = new ParameterSlider(*owner.getParameters()[12] ));
    
    
    addAndMakeVisible (filAttackSlider = new ParameterSlider(*owner.getParameters()[13] ));

    addAndMakeVisible (filDecaySlider = new ParameterSlider(*owner.getParameters()[14] ));

    addAndMakeVisible (filSustainSlider = new ParameterSlider(*owner.getParameters()[15] ));

    addAndMakeVisible (filReleaseSlider = new ParameterSlider(*owner.getParameters()[16] ));
    
    addAndMakeVisible(gainSlider = new ParameterSlider(*owner.getParameters()[17] ));

    // add some labels for the sliders...
    
    labelBackGroundGlow.setGlowProperties(15.0f, Colours::black.withAlpha(0.15f));
    
    setupLabel (bendAmountLabel, bendAmountSlider);
    
    setupLabel (detuneLabel, detuneSlider);
    
    setupLabel (balanceLabel, balanceSlider);
    
    setupLabel (cutoffLabel, cutoffSlider);
    
    setupLabel (resonaceLabel, resonaceSlider);
    
    setupLabel (keytrackLabel, keytrackSlider);
    
    setupLabel (filEnvAmtLabel, filEnvAmtSlider);
    
    setupLabel (lfoRateLabel, lfoRateSlider);
    
    setupLabel (vibratoAmtLabel, vibratoAmtSlider);
    
    
    setupLabel (volAttackLabel, volAttackSlider);
    
    setupLabel (volDecayLabel, volDecaySlider);
    
    setupLabel (volSustainLabel, volSustainSlider);
    
    setupLabel (volReleaseLabel, volReleaseSlider);
    
    
    setupLabel (filAttackLabel, filAttackSlider);
    
    setupLabel (filDecayLabel, filDecaySlider);
    
    setupLabel (filSustainLabel, filSustainSlider);
    
    setupLabel (filReleaseLabel, filReleaseSlider);
    
    setupLabel(gainLabel, gainSlider);
    
    
    // add the midi keyboard component..
    
    addAndMakeVisible (midiKeyboard);
    midiKeyboard.setColour(MidiKeyboardComponent::whiteNoteColourId, Colour(0xffccffff).darker(0.3f));
    
    // add the triangular resizer component for the bottom-right of the UI
    
    addAndMakeVisible (resizer = new ResizableCornerComponent (this, &resizeLimits));
    resizeLimits.setSizeLimits (600, 400, 2000, 1000);
 
    
    // set our component's initial size to be the last one that was stored in the filter's settings
    
    setSize (owner.lastUIWidth,
             owner.lastUIHeight);
    
}

WavelandSynthAudioProcessorEditor::~WavelandSynthAudioProcessorEditor()
{
}

//==============================================================================

void WavelandSynthAudioProcessorEditor::setupLabel(juce::Label& labelToUse, juce::Component *sliderToUse)
{
    addAndMakeVisible(labelToUse);
    labelToUse.attachToComponent(sliderToUse, false);
    labelToUse.setFont(Font ("Calibri", 17.0f, Font::italic));
    labelToUse.setSize(60, 20);
    labelToUse.setColour(Label::textColourId, juce::Colours::lightblue);
    labelToUse.setColour(Label::backgroundColourId, juce::Colour::fromFloatRGBA(0.0, 0.0, 0.0, 0.0));
    labelToUse.setJustificationType(Justification::centred);
    labelToUse.setBorderSize(BorderSize<int> (12));
    labelToUse.setComponentEffect(&labelBackGroundGlow);
}

void WavelandSynthAudioProcessorEditor::paint (Graphics& g)
{
    g.setGradientFill (ColourGradient (Colours::lightgrey, 0, 0,
                                       Colours::grey, 0, (float) getHeight(), false));
    g.fillAll();
}

void WavelandSynthAudioProcessorEditor::resized()
{
    // This lays out our child components...
    
    Rectangle<int> r (getLocalBounds().reduced (8));
    BackImageObj.setBounds(0, 0, r.getWidth() + 16, r.getHeight() + 16);
    BackImageObj.resized(r.getWidth() + 16, r.getHeight() + 16);

    midiKeyboard.setBounds (r.removeFromBottom (70));
    int sliderMinDistance = 60;
    int divider = 9;
    
    
    r.removeFromTop (30);
    Rectangle<int> sliderArea;
    sliderArea.setBounds(r.getX() + 8, r.getY() + r.getHeight() / 2.5, r.getWidth() - 16, r.getHeight() / 4);
    Rectangle<int> sliderRow2;
    sliderRow2.setBounds(r.getX() + 8, r.getY() + sliderArea.getBottom(), r.getWidth() - 16, r.getHeight() /5);
    
    int distanceBetween {jmax (sliderArea.getWidth()/divider, sliderMinDistance)};
    int rowDistance {jmax (sliderRow2.getHeight(), sliderMinDistance)};
    
    bendAmountSlider->setBounds (sliderArea.removeFromLeft (distanceBetween));
    bendAmountSlider->setSize (distanceBetween, rowDistance);
    
    detuneSlider->setBounds (sliderArea.removeFromLeft (distanceBetween));
    detuneSlider->setSize (distanceBetween, rowDistance);
    
    balanceSlider->setBounds (sliderArea.removeFromLeft (distanceBetween));
    balanceSlider->setSize (distanceBetween, rowDistance);
    
    cutoffSlider->setBounds (sliderArea.removeFromLeft (distanceBetween));
    cutoffSlider->setSize (distanceBetween, rowDistance);
    
    resonaceSlider->setBounds (sliderArea.removeFromLeft (distanceBetween));
    resonaceSlider->setSize (distanceBetween, rowDistance);
    
    keytrackSlider->setBounds (sliderArea.removeFromLeft (distanceBetween));
    keytrackSlider->setSize (distanceBetween, rowDistance);
    
    filEnvAmtSlider->setBounds (sliderArea.removeFromLeft (distanceBetween));
    filEnvAmtSlider->setSize (distanceBetween, rowDistance);
    
    lfoRateSlider->setBounds (sliderArea.removeFromLeft (distanceBetween));
    lfoRateSlider->setSize (distanceBetween, rowDistance);
    
    vibratoAmtSlider->setBounds (sliderArea.removeFromLeft (distanceBetween));
    vibratoAmtSlider->setSize (distanceBetween, rowDistance);
    
    
    volAttackSlider->setBounds (sliderRow2.removeFromLeft (distanceBetween));
    volAttackSlider->setSize (distanceBetween, rowDistance);
    
    volDecaySlider->setBounds (sliderRow2.removeFromLeft (distanceBetween));
    volDecaySlider->setSize (distanceBetween, rowDistance);
    
    volSustainSlider->setBounds (sliderRow2.removeFromLeft (distanceBetween));
    volSustainSlider->setSize (distanceBetween, rowDistance);
    
    volReleaseSlider->setBounds (sliderRow2.removeFromLeft (distanceBetween));
    volReleaseSlider->setSize (distanceBetween, rowDistance);
    
    filAttackSlider->setBounds (sliderRow2.removeFromLeft (distanceBetween));
    filAttackSlider->setSize (distanceBetween, rowDistance);
    
    filDecaySlider->setBounds (sliderRow2.removeFromLeft (distanceBetween));
    filDecaySlider->setSize (distanceBetween, rowDistance);
    
    filSustainSlider->setBounds (sliderRow2.removeFromLeft (distanceBetween));
    filSustainSlider->setSize (distanceBetween, rowDistance);
    
    filReleaseSlider->setBounds (sliderRow2.removeFromLeft (distanceBetween));
    filReleaseSlider->setSize (distanceBetween, rowDistance);
    
    gainSlider->setBounds (sliderRow2.removeFromLeft (distanceBetween));
    gainSlider->setSize (distanceBetween, rowDistance);
    
    resizer->setBounds (getWidth() - 16, getHeight() - 16, 16, 16);
    
    getProcessor().lastUIWidth = getWidth();
    getProcessor().lastUIHeight = getHeight();
}
