/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"


//==============================================================================
/**
 
*/
class WavelandSynthAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    WavelandSynthAudioProcessor();
    ~WavelandSynthAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void reset () override;
    void updateParameters();
    
    //==============================================================================
    void processBlock (AudioBuffer<float>& buffer, MidiBuffer& midiMessages) override
    {
        jassert(! isUsingDoublePrecision());
        process (buffer, midiMessages);
    }
    
    void processBlock (AudioBuffer<double>& buffer, MidiBuffer& midiMessages) override
    {
        jassert(! isUsingDoublePrecision());
        process (buffer, midiMessages);
    }
    
    //==============================================================================
    bool hasEditor() const override                                             { return true; }
    AudioProcessorEditor* createEditor() override;

    //==============================================================================
    const String getName() const override                                       { return JucePlugin_Name; }

    const String getInputChannelName (int channelIndex) const override          { return String (channelIndex + 1); }
    const String getOutputChannelName (int channelIndex) const override         { return String (channelIndex + 1); }
    
    bool isInputChannelStereoPair (int /*index*/) const override                { return true; }
    bool isOutputChannelStereoPair (int /*index*/) const override               { return true; }

    bool acceptsMidi() const override                                           { return true; }
    bool producesMidi() const override                                          { return true; }
    
    bool silenceInProducesSilenceOut() const override                           { return false; }
    double getTailLengthSeconds() const override                                { return 0.0; }

    //==============================================================================
    int getNumPrograms() override                                               { return 1; }
    int getCurrentProgram() override                                            { return 0; }
    void setCurrentProgram (int /*index*/) override                             {}
    const String getProgramName (int /*index*/) override                        {return "Default"; }
    void changeProgramName (int /*index*/, const String& /*name*/) override     {}

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    //==============================================================================
    
    MidiKeyboardState& getMidiKeyboardState(){return keyboardState;}

    int lastUIWidth, lastUIHeight;

private:
    //==============================================================================
    
    AudioParameterFloat* bendAmountParam;
    AudioParameterFloat* detuneParam;
    AudioParameterFloat* balanceParam;
    AudioParameterFloat* cutoffKnobParam;
    AudioParameterFloat* resonaceParam;
    AudioParameterFloat* keytrackParam;
    AudioParameterFloat* filEnvAmtParam;
    AudioParameterFloat* lfoRateParam;
    AudioParameterFloat* vibratoAmtParam;
    
    AudioParameterFloat* volEnvAttParam;
    AudioParameterFloat* volEnvDecParam;
    AudioParameterFloat* volEnvSusParam;
    AudioParameterFloat* volEnvRelParam;
    
    AudioParameterFloat* filEnvAttParam;
    AudioParameterFloat* filEnvDecParam;
    AudioParameterFloat* filEnvSusParam;
    AudioParameterFloat* filEnvRelParam;
    
    AudioParameterFloat* gainParam;
    
    MidiKeyboardState keyboardState;
    
    template <typename FloatType>
    void process (AudioBuffer<FloatType>& buffer, MidiBuffer& midiMessages);
    
    
    Synthesiser synth;
    
    void initialiseSynth();
    
    
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (WavelandSynthAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
